x=levels(iris$Species)
# Print Setosa correlation matrix
print(x[1])
cor(iris[iris$Species==x[1],1:4])
# Print Versicolor correlation matrix
print(x[2])
cor(iris[iris$Species==x[2],1:4])
# Print Virginica correlation matrix
print(x[3])
cor(iris[iris$Species==x[3],1:4])
# Return all `iris` data
iris
# Return first 5 lines of `iris`
head(iris)
# Return structure of `iris`
str(iris)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(iris$Species, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- iris[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- iris[validation_index,]
validation_index <- createDataPartition(iris$Species, p=0.80, list=FALSE)
install.packages("caret")
install.packages("caret")
install.packages("caret")
```r
install.packages("caret")
library("caret")
```r
install.packages("caret")
library("caret")
install.packages("caret")
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(iris$Species, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- iris[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- iris[validation_index,]
x <- dataset[,1:4]
y <- dataset[,5]
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])}
# scatterplot matrix
featurePlot(x=x, y=y, plot="ellipse")
featurePlot(x=x, y=y, plot="ellipse")
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
package.install("e1071")
install.packages("e1071", dep = TRUE)
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
```r
print(fit.lda)
``
```r
print(fit.lda)
```
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
library(tidyverse)
library(ggpubr)
```r
install.packages("ggpubr")
library(tidyverse)
library(ggpubr)
```
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(tidyverse)
library(ggpubr)
install.packages("datarium")
install.packages("ggpubr")
install.packages("datarium")
library(tidyverse)
library(ggpubr)
# Load the package
data("marketing", package = "datarium")
head(marketing, 4)
ggplot(marketing, aes(x = youtube, y = sales)) +
geom_point() +
stat_smooth()
cor(marketing$sales, marketing$youtube)
model <- lm(sales ~ youtube, data = marketing)
model
ggplot(marketing, aes(youtube, sales)) +
geom_point() +
stat_smooth(method = lm)
```r
summary(model)
```
data("iris")
?iris
levels(iris$Species)
```r
iris1 <- iris[,-5]
iris_label <- iris[,5]
```
# to reproduce the results
# you have to use set.seed()
set.seed(1)
wss<- NULL
for (i in 1:10){
fit = kmeans(iris1,centers = i)
wss = c(wss, fit$tot.withinss)
}
plot(1:10, wss, type = "o")
fit <- kmeans(iris[,-5], 3,)
library(fpc)
plotcluster(iris[,-5],fit$cluster,pointsbyclvecd=FALSE)
install.packages("fpc")
install.packages("fpc")
library(fpc)
fit <- kmeans(iris[,-5], 3,)
plotcluster(iris[,-5],fit$cluster,pointsbyclvecd=FALSE)
plotcluster(iris[,-5],fit$cluster,pointsbyclvecd=FALSE)
plotcluster(iris[,-5],fit$cluster,pointsbyclvecd=TRUE)
plotcluster(iris[,-5],fit$cluster,pointsbyclvecd=TRUE)
fit$betweenss/fit$totss
10 + 5
y <- 5
y <- 5
x <- 10
number <- x +y
2x <- 100
x2 <- 100
X
?factor
hQuality <- factor(hQuality)
hQuality <- c("Good", "Average", "Bad","Good", "Average", "Bad", "Bad","Good")
hQuality <- factor(hQuality)
hQuality <- c("Good", "Average", "Bad","Good", "Average", "Bad", "Bad","Good")
hQuality <- factor(hQuality)
hQuality
hPrice <- c(5000000, 4500000, 3600000)
hPrice
hQuality <- c("Good", "Average", "Bad")
hQuality
df <- data.frame(hPrice, hQuality)
View(df)
string1 <- 'I love Essex'
string1 <- "I love Essex'
string1 <- '"I Love Essex"'
string1 <- "'I Love Essex'"
string1 <- "'I Love Essex''
str <- "Hello Essex.
I came to attend this course from Mars.
Do you think it is worth learning R?
I want to become Data Scientist on Mars."
str
string1 <- "'I Love Essex''
str <- "Hello Essex!"
nchar(str)
string1 <- "'I Love Essex''
str <- "Hello Essex!"
nchar(str)
string1 <- "'I Love Essex''
str <- "Hello Essex!"
nchar(str)
string1 <- "'I Love Essex''
mysrting <- "Hello Essex"
nchar(mysrting)
myString = "Hello"
nchar(myString)
myString = "Hello Essex"
nchar(myString)
myString = "Hello Essex, I am from UK"
nchar(myString)
grepl("H", myString)
grepl("Z", myString)
grepl("Hello", myString)
grepl("Holla", myString)
grepl("Y", myString)
?grepl
str1 <- "Hello"
str2 <- "Colchester"
paste(str1, str2)
c(str1, str2)
vec = c(str1, str2)
vec[1]
vec[2]
str <- "We play cricket in "Lords" and it is the home of Cricket"
str
str1 <- "We play cricket in "Lords" and it is the home of Cricket"
str1
str1 <- "We play cricket in "Lords" and it is the home of Cricket"
str1
str <- "We play cricket in \"Lords\" and it is the home of Cricket"
str
cat(str)
c("We", "Love", "Essex")
install.packages("tidyverse")
library(tidyverse)
x <- c("Apple", "Banana", "Pear", "Mango", "Kiwi")
x
str_sub(x, 1, 3)
str_sub(x, 1, 4)
str_sub(x, 1, 2)
x[1:3]
x[1:3]
str_sub(x, 1, 3)
str_sub(x, -3, -1)
str_sub(x, -3, -1)
x <- c("Apple", "Banana", "Pear", "Mango", "Ki")
str_sub(x, -3, -1)
str_sub(x, -4, -1)
x <- c("Haider", "Mushfika", "Alice", "Abdullahi", "Trang", "Daniel", "Ebuka")
x
str_sub(x, 1, 3)
str_sub(x, -4, -1)
str_sub(x, -6, -1)
5>2
5 = 5
5 == 5
5<2
a <- 100
b <- 90
a > b
a < b
a == b
a <- 100
b <- 93
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a + b
a - b
a * b
a / b
a %% b
my_var <- 10
my_var
my_var1 <<- 10
my_var1
10 -> my_var2
my_var2
10 ->> my_var3
my_var3
a == b
a != b
a > b
a < b
a >= b
a <= b
a <- 3
b <- 10
if (b > a) {
print("b is greater than a")
}
a <- 31
b <- 10
if (b > a) {
print("b is greater than a")
}
a <- 10
b <- 10
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print ("a and b are equal")
}
a <- 20
b <- 10
if (b > a) {
print("b is greater than a")
} else if (a == b) {
print("a and b are equal")
} else {
print("a is greater than b")
}
a <- 20
b <- 10
if (b > a) {
print("b is greater than a")
} else {
print("b is not greater than a")
}
a <- 20
b <- 33
c <- 50
if (a > b & c > a){
print("Both conditions are true")
}
a <- 200
b <- 33
c <- 50
if (a > b & c > a){
print("Both conditions are true")
}
a <- 200
b <- 33
c <- 500
if (a > b & c > a){
print("Both conditions are true")
}
a <- 200
b <- 33
c <- 50
if (a > b | c > a){
print("Both conditions are true")
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
1:10
for (x in 1:10) {
print(x)
}
my_cars <- list("bmw", "audi", "tesla", "honda")
for (x in my_cars) {
print(x)
}
add(2,3)
c("hello","Essex")
getwd()
my_function <- function() { # create a function with the name my_function
print("Hello World!")
}
my_function()
myaddition <- function(x,y) { # create a function with the name my_function
z = x + y
print(z)
}
myaddition(10, 20)
my_function1 <- function(fname) {
paste("I Love", fname)
}
my_function1("Colchester")
my_function1("Essex")
my_function1("University of Essex")
my_function1 <- function(hahaha) {
paste("I Love", hahaha)
}
my_function1("Colchester")
my_function2 <- function(fname, lname) {
paste(fname, lname)
}
my_function2("Haider", "Raza")
shootings <- read.csv("~/Desktop/shootings.csv")
View(shootings)
View(shootings)
shootings <- read.csv("~/Desktop/shootings.csv")
View(shootings)
sessionInfo()
search()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
help.search("scatter")
help.search("ggplot")
help.search("ggplot")
help.search("ggplot2")
f
treeData <- read.csv(file = "Data/odTrees.csv")
setwd("~/GitHub/BootCamp-R")
getwd()
treeData <- read.csv(file = "Data/odTrees.csv")
View(treeData)
getwd()
treeData <- read.csv(file = "Data/odTrees.csv")
View(treeData)
# Inpect the first 5 rows
head(treeData)
tail(treeData)
str(treeData)
View(treeData)
summary(treeData)
clear
treeData[1,1]
View(treeData)
treeData[1,10]
View(treeData)
treeData[,1]
treeData[:,1]
treeData[,1]
treeData[1,]
treeData[1,1:5]
treeData[1:3,1:5]
treeData[:3,:5]
treeData[3,-5]
treeData[-3,5]
treeData[c(1,3,6), ]
treeData[, c(1,3,6)]
treeData[1:3, c(1,3,6)]
treeData[1:3 , "AGE"]
treeData[1:3 , c("AGE","SPECIES")]
treeData$AGE
summary(treeData$AGE)
mean(treeData$DIAMETERinCENTIMETRES)
treeData$AGE[1:5]
treeData[1:5,4]
treeData[1:5,c(4,7)]
treeData[1:5,c(4,8)]
treeData[1:5, c("AGE", "CONDITION")]
View(treeData)
View(treeData)
idx <- treeData$CONDITION == "Fair"
idx
treeData[idx, ]
fairTree <- treeData[idx, ]
View(fairTree)
idx1 <- treeData$CONDITION == "Poor"
poorTree <- treeData[idx1, ]
idx2 <- which(treeData$CONDITION == "Poor")
poorTree2 <- treeData[idx2, ]
idx1 <- treeData$CONDITION == "Poor"
idx2 <- which(treeData$CONDITION == "Poor")
idx <- which(treeData$CONDITION == "Poor")
sub_meta <- treeData[idx, ]
write.csv(sub_meta, file="Data/subset_meta.csv")
shootings <- read.csv("~/GitHub/BootCamp-R/Data/shootings.csv")
View(shootings)
ggplot(shootings, aes(race,fill=state))+
geom_bar(stat="count", position='dodge',width = 0.5)+  # Dodge for group
labs(x="Genre",
y="Count",
title="Distribution of Netflix Shows in India & US (Group) ")+
theme_bw()+
theme(plot.title = element_text(size=22),axis.text.x= element_text(size=15,angle=90),
axis.text.y= element_text(size=15), axis.title=element_text(size=18))
ggplot(shootings, aes(state,fill=race))+
geom_bar(stat="count", position='dodge',width = 0.5)+  # Dodge for group
ggplot(shootings, aes(state,fill=race))+
geom_bar(stat="count", position='dodge',width = 0.5)  # Dodge for group
ggplot(shootings, aes(state,fill=race))+
geom_bar(stat="count", position='dodge',width = 0.5)+  # Dodge for group
labs(x="Genre",
y="Count",
title="Distribution of Netflix Shows in India & US (Group) ")+
theme_bw()+
theme(plot.title = element_text(size=22),axis.text.x= element_text(size=15,angle=90),
axis.text.y= element_text(size=15), axis.title=element_text(size=18))
ggplot(shootings, aes(state,fill=race$black))+
geom_bar(stat="count", position='dodge',width = 0.5)+  # Dodge for group
labs(x="Genre",
y="Count",
title="Distribution of Netflix Shows in India & US (Group) ")+
theme_bw()+
theme(plot.title = element_text(size=22),axis.text.x= element_text(size=15,angle=90),
axis.text.y= element_text(size=15), axis.title=element_text(size=18))
ggplot(data = data) +
geom_bar(fill = "#3A00E6",mapping = aes(x = state))  +
theme(panel.background = element_rect(fill = '#DADDE6', colour = '#DADDE6'))
ggplot(data = shootings) +
geom_bar(fill = "#3A00E6",mapping = aes(x = state))  +
theme(panel.background = element_rect(fill = '#DADDE6', colour = '#DADDE6'))
ggplot(data = shootings) +
geom_bar(fill = "#3A00E6",mapping = aes(x = race))  +
theme(panel.background = element_rect(fill = '#DADDE6', colour = '#DADDE6'))
ggplot(data = shootings) +
geom_bar(fill = "#3A00E6",mapping = aes(x = signs_of_mental_illness))  +
theme(panel.background = element_rect(fill = '#DADDE6', colour = '#DADDE6'))
